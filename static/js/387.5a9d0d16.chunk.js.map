{"version":3,"file":"static/js/387.5a9d0d16.chunk.js","mappings":"sQAAA,IAAMA,EAAM,+BACNC,EAAU,mCAET,SAASC,IACd,IAAMC,EAAW,GAAAC,OAAMJ,EAAG,8BAAAI,OAA6BH,GACvD,OAAOI,MAAMF,GAAaG,MAAK,SAAAC,GAC7B,OAAIA,EAAIC,GACCD,EAAIE,OAGNC,QAAQC,OAAO,IAAIC,MAAM,gCAClC,GACF,CAEO,SAASC,EAAkBC,GAChC,IAAMC,EAAgB,GAAAX,OAAMJ,EAAG,WAAAI,OAAUU,EAAQ,aAAAV,OAAYH,GAC7D,OAAOI,MAAMU,GAAkBT,MAAK,SAAAC,GAClC,OAAIA,EAAIC,GACCD,EAAIE,OAGNC,QAAQC,OAAO,IAAIC,MAAM,gCAClC,GACF,CAGO,SAASI,EAAUF,GACxB,IAAMG,EAAO,GAAAb,OAAMJ,EAAG,WAAAI,OAAUU,EAAQ,qBAAAV,OAAoBH,GAC5D,OAAOI,MAAMY,GAASX,MAAK,SAAAC,GACzB,OAAIA,EAAIC,GACCD,EAAIE,OAGNC,QAAQC,OAAO,IAAIC,MAAM,gCAClC,GACF,CAGO,SAASM,EAAaJ,GAC3B,IAAMK,EAAU,GAAAf,OAAMJ,EAAG,WAAAI,OAAUU,EAAQ,qBAAAV,OAAoBH,GAC/D,OAAOI,MAAMc,GAAYb,MAAK,SAAAC,GAC5B,OAAIA,EAAIC,GACCD,EAAIE,OAGNC,QAAQC,OAAO,IAAIC,MAAM,gCAClC,GACF,CAGO,SAASQ,EAAYC,EAAYC,GACtC,IAAMH,EAAU,GAAAf,OAAMJ,EAAG,0BAAAI,OAAyBH,EAAO,WAAAG,OAAUiB,GACnE,OAAOhB,MAAMc,GAAYb,MAAK,SAAAC,GAC5B,OAAIA,EAAIC,GACCD,EAAIE,QAIXa,GAAS,GAAOZ,QAAQC,OAAO,IAAIC,MAAM,iCAE7C,GACF,C,mIC3DaW,EAAYC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0GAOtBC,EAAWH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,8DAMpBG,EAAML,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,6C,SC6B7B,EAtCa,WACX,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,IAEpBI,EAAAA,EAAAA,YAAU,YACRvB,EAAAA,EAAAA,GAAUe,GACPzB,MAAK,SAAAkC,GACJF,EAAQE,EACV,IACCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMG,QAAQ,GAC9C,GAAG,CAACd,IAEJ,IAAQe,EAAST,EAATS,KACR,OACEC,EAAAA,EAAAA,KAACxB,EAAS,CAAAyB,UACRD,EAAAA,EAAAA,KAACpB,EAAQ,CAAAqB,SACF,OAAJF,QAAI,IAAJA,OAAI,EAAJA,EAAMG,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAIC,EAAIF,EAAJE,KAAMC,EAAYH,EAAZG,aAAY,OAClCC,EAAAA,EAAAA,MAAA,MAAAN,SAAA,EACED,EAAAA,EAAAA,KAAClB,EAAG,CACF0B,IAAG,kCAAAnD,OAAoCiD,GACvCG,IAAI,MAENT,EAAAA,EAAAA,KAAA,KAAAC,SAAII,MALGD,EAMJ,OAKf,C","sources":["Service/fetchApi.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["const URL = 'https://api.themoviedb.org/3';\nconst api_key = '481cbb6dba5121edc01136f73aa6b3c6';\n//--\nexport function fetchTrending() {\n  const urlTrending = `${URL}/trending/all/day?api_key=${api_key}`;\n  return fetch(urlTrending).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(new Error('Can´t find tranding films'));\n  });\n}\n//--\nexport function fetchMovieDetails(moviesID) {\n  const urlMoviesDetails = `${URL}/movie/${moviesID}?api_key=${api_key}`;\n  return fetch(urlMoviesDetails).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(new Error('Can´t find tranding films'));\n  });\n}\n//--\n\nexport function fetchCast(moviesID) {\n  const urlCast = `${URL}/movie/${moviesID}/credits?api_key=${api_key}`;\n  return fetch(urlCast).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(new Error('Can´t find tranding films'));\n  });\n}\n\n//-- https://api.themoviedb.org/3/movie/{movie_id}/reviews\nexport function fetchReviews(moviesID) {\n  const URLReviews = `${URL}/movie/${moviesID}/reviews?api_key=${api_key}`;\n  return fetch(URLReviews).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(new Error('Can´t find tranding films'));\n  });\n}\n\n//-- https://api.themoviedb.org/3/search/movie\nexport function fetchSearch(SearchName, setError) {\n  const URLReviews = `${URL}/search/movie?api_key=${api_key}&query=${SearchName}`;\n  return fetch(URLReviews).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return (\n      setError(true), Promise.reject(new Error('Can´t find tranding films'))\n    );\n  });\n}\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin: 20px 30px;\n  padding-bottom: 20px;\n  gap: 10px;\n  border-bottom: 1px solid black;\n`;\n\nexport const ItemList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nexport const Img = styled.img`\n  width: 100px;\n  height: 160px;\n`;\n","import { fetchCast } from '../../Service/fetchApi';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Container, Img, ItemList } from './Cast.styled';\nimport PropTypes from 'prop-types';\n//--\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [Cast, setCast] = useState([]);\n\n  useEffect(() => {\n    fetchCast(movieId)\n      .then(data => {\n        setCast(data);\n      })\n      .catch(error => console.log(error.message));\n  }, [movieId]);\n\n  const { cast } = Cast;\n  return (\n    <Container>\n      <ItemList>\n        {cast?.map(({ id, name, profile_path }) => (\n          <li key={id}>\n            <Img\n              src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n              alt=\"\"\n            />\n            <p>{name}</p>\n          </li>\n        ))}\n      </ItemList>\n    </Container>\n  );\n};\n\nCast.propTypes = {\n  cast: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    profile_path: PropTypes.string,\n  }),\n};\n\nexport default Cast;\n"],"names":["URL","api_key","fetchTrending","urlTrending","concat","fetch","then","res","ok","json","Promise","reject","Error","fetchMovieDetails","moviesID","urlMoviesDetails","fetchCast","urlCast","fetchReviews","URLReviews","fetchSearch","SearchName","setError","Container","styled","_templateObject","_taggedTemplateLiteral","ItemList","_templateObject2","Img","_templateObject3","movieId","useParams","_useState","useState","_useState2","_slicedToArray","Cast","setCast","useEffect","data","catch","error","console","log","message","cast","_jsx","children","map","_ref","id","name","profile_path","_jsxs","src","alt"],"sourceRoot":""}
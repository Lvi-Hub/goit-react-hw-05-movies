{"version":3,"file":"static/js/304.98534308.chunk.js","mappings":"sQAAA,IAAMA,EAAM,+BACNC,EAAU,mCAET,SAASC,IACd,IAAMC,EAAW,UAAMH,EAAN,qCAAsCC,GACvD,OAAOG,MAAMD,GAAaE,MAAK,SAAAC,GAC7B,OAAIA,EAAIC,GACCD,EAAIE,OAGNC,QAAQC,OAAO,IAAIC,MAAM,gCACjC,GACF,CAEM,SAASC,EAAkBC,GAChC,IAAMC,EAAgB,UAAMd,EAAN,kBAAmBa,EAAnB,oBAAuCZ,GAC7D,OAAOG,MAAMU,GAAkBT,MAAK,SAAAC,GAClC,OAAIA,EAAIC,GACCD,EAAIE,OAGNC,QAAQC,OAAO,IAAIC,MAAM,gCACjC,GACF,CAGM,SAASI,EAAUF,GACxB,IAAMG,EAAO,UAAMhB,EAAN,kBAAmBa,EAAnB,4BAA+CZ,GAC5D,OAAOG,MAAMY,GAASX,MAAK,SAAAC,GACzB,OAAIA,EAAIC,GACCD,EAAIE,OAGNC,QAAQC,OAAO,IAAIC,MAAM,gCACjC,GACF,CAGM,SAASM,EAAaJ,GAC3B,IAAMK,EAAU,UAAMlB,EAAN,kBAAmBa,EAAnB,4BAA+CZ,GAC/D,OAAOG,MAAMc,GAAYb,MAAK,SAAAC,GAC5B,OAAIA,EAAIC,GACCD,EAAIE,OAGNC,QAAQC,OAAO,IAAIC,MAAM,gCACjC,GACF,CAGM,SAASQ,EAAYC,GAC1B,IAAMF,EAAU,UAAMlB,EAAN,iCAAkCC,EAAlC,kBAAmDmB,GACnE,OAAOhB,MAAMc,GAAYb,MAAK,SAAAC,GAC5B,OAAIA,EAAIC,GACCD,EAAIE,OAGNC,QAAQC,OAAO,IAAIC,MAAM,gCACjC,GACF,C,6ICzDYU,EAAYC,EAAAA,GAAAA,IAAH,yGAKTC,EAAQD,EAAAA,GAAAA,IAAH,0FAKLE,EAAOF,EAAAA,GAAAA,GAAH,iE,GAKMA,EAAAA,GAAAA,IAAH,iD,QC0BpB,EArCa,WACX,OAAwCG,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MASjB,OAPAC,EAAAA,EAAAA,YAAU,YACR5B,EAAAA,EAAAA,MACGG,MAAK,SAAA0B,GACJJ,EAAgBI,EAAKC,QACtB,IACAC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMG,QAAtB,GACf,GAAE,KAED,UAAChB,EAAD,YACE,SAACE,EAAD,UAAO,oBACP,SAACC,EAAD,iBACGE,QADH,IACGA,OADH,EACGA,EAAcY,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAd,OACjB,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMhB,GAA1C,SACGY,GAASC,KAFLF,EADQ,QAU1B,C","sources":["Service/fetchApi.jsx","pages/Home/Home.styled.js","pages/Home/Home.jsx"],"sourcesContent":["const URL = 'https://api.themoviedb.org/3';\nconst api_key = '481cbb6dba5121edc01136f73aa6b3c6';\n//--\nexport function fetchTrending() {\n  const urlTrending = `${URL}/trending/all/day?api_key=${api_key}`;\n  return fetch(urlTrending).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(new Error('Can´t find tranding films'));\n  });\n}\n//--\nexport function fetchMovieDetails(moviesID) {\n  const urlMoviesDetails = `${URL}/movie/${moviesID}?api_key=${api_key}`;\n  return fetch(urlMoviesDetails).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(new Error('Can´t find tranding films'));\n  });\n}\n//--\n\nexport function fetchCast(moviesID) {\n  const urlCast = `${URL}/movie/${moviesID}/credits?api_key=${api_key}`;\n  return fetch(urlCast).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(new Error('Can´t find tranding films'));\n  });\n}\n\n//-- https://api.themoviedb.org/3/movie/{movie_id}/reviews\nexport function fetchReviews(moviesID) {\n  const URLReviews = `${URL}/movie/${moviesID}/reviews?api_key=${api_key}`;\n  return fetch(URLReviews).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(new Error('Can´t find tranding films'));\n  });\n}\n\n//-- https://api.themoviedb.org/3/search/movie\nexport function fetchSearch(SearchName) {\n  const URLReviews = `${URL}/search/movie?api_key=${api_key}&query=${SearchName}`;\n  return fetch(URLReviews).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(new Error('Can´t find tranding films'));\n  });\n}\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin: 20px 0px;\n  padding-bottom: 20px;\n  border-bottom: 1px solid black;\n`;\nexport const Title = styled.div`\n  padding-bottom: 20px;\n  font-size: 24px;\n  font-weight: 800;\n`;\nexport const List = styled.ul`\n  font-size: 18px;\n  font-weight: 400;\n`;\n\nexport const AddInfo = styled.div`\n  padding-bottom: 20px;\n`;\n","import React, { useState, useEffect } from 'react';\nimport { fetchTrending } from '../../Service/fetchApi';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Container, List, Title } from './Home.styled';\n//--\nconst Home = () => {\n  const [trendingList, setTrendingList] = useState([]);\n  const location = useLocation();\n\n  useEffect(() => {\n    fetchTrending()\n      .then(data => {\n        setTrendingList(data.results);\n      })\n      .catch(error => console.log(error.message));\n  }, []);\n  return (\n    <Container>\n      <Title>Trending today</Title>\n      <List>\n        {trendingList?.map(({ id, title, name }) => (\n          <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              {title || name}\n            </Link>\n          </li>\n        ))}\n      </List>\n    </Container>\n  );\n};\n\nHome.propTypes = {\n  trendingList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default Home;\n"],"names":["URL","api_key","fetchTrending","urlTrending","fetch","then","res","ok","json","Promise","reject","Error","fetchMovieDetails","moviesID","urlMoviesDetails","fetchCast","urlCast","fetchReviews","URLReviews","fetchSearch","SearchName","Container","styled","Title","List","useState","trendingList","setTrendingList","location","useLocation","useEffect","data","results","catch","error","console","log","message","map","id","title","name","to","state","from"],"sourceRoot":""}